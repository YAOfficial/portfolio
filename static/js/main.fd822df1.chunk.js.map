{"version":3,"sources":["sw.png","virus.png","serviceWorker.js","dataContent.js","Data.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","DataContent","props","className","item","class","src","id","text1","text2","text3","href","link1","target","rel","type","link2","toData","require","Appo","state","dato","this","map","key","React","Component","ReactDom","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","gsap","registerPlugin","ScrollTrigger","timeline","scrollTrigger","trigger","pin","start","end","once","scrub","addLabel","scale","from","y","innerWidth","x","duration","to","opacity"],"mappings":"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","file":"static/js/main.fd822df1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sw.c4c965d2.png\";","module.exports = __webpack_public_path__ + \"static/media/virus.099b94be.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nfunction DataContent(props) {\r\n  return (\r\n    <div className={props.item.class}>\r\n      {props.item.src}\r\n      <div id=\"text00\">\r\n        <h2 id=\"p6\">{props.item.text1}</h2>\r\n        <p id=\"p4\">{props.item.text2}</p>\r\n        <p id=\"91\">{props.item.text3}</p>\r\n        <div id=\"butbois1\">\r\n          <a href={props.item.link1} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <button id=\"bat\" className=\"buta\" type=\"button\">\r\n              <small className=\"bute\"> View App </small>\r\n            </button>\r\n          </a>\r\n          <a href={props.item.link2} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <button id=\"bat\" className=\"buta\" type=\"button\">\r\n              <small className=\"bute\">View Code</small>\r\n            </button>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default DataContent;\r\n","import React from \"react\";\r\nconst toData = [\r\n  {\r\n    class: \"content0\",\r\n\r\n    src: <img id=\"imglogo\" src={require(\"./sw.png\")} />,\r\n    text1: \"Full Stack social media app\",\r\n    text2: \r\n     \r\n        \"Built a social media app following solidsails course  alowing users a vast array of functionality\"\r\n       \r\n   \r\n    ,\r\n    text3: \"Developed with Html, Css , Js, Firebase , Ionic and React\",\r\n    link2: \"https://github.com/YAOfficial/Newzy\",\r\n    link1: \"https://newz-c60cc.web.app/news\",\r\n  },\r\n\r\n  {\r\n    class: \"content3\",\r\n    src: <img src={require(\"./virus.png\")} />,\r\n    text1: \"Covid-19 Tracker Dashboard\",\r\n    text2:\r\n      \"Built a coronavirus dashboard showcasing various forms of data  \",\r\n    text3: \"Developed using Html, Css, js, React, leaflet, gatsby & rechart \",\r\n    link2: \"https://github.com/YAOfficial/covidreport\",\r\n    link1: \"https://cov1dreport.netlify.app/\",\r\n  },\r\n];\r\n\r\nexport default toData;\r\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDom from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport DataContent from \"./dataContent\";\nimport toData from \"./Data\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\nclass Appo extends React.Component {\n  constructor() {\n    // eslint-disable-next-line\n    super();\n    this.state = {\n      dato: toData,\n    };\n  }\n  render() {\n    const DataContento = this.state.dato.map(\n      (item) => <DataContent key={item.id} item={item} />\n      // eslint-disable-next-line\n    );\n    return DataContento;\n  }\n}\nReactDom.render(<Appo />, document.getElementById(\"container1\"));\n\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\ngsap.registerPlugin(ScrollTrigger);\n\nlet firstAnim = gsap.timeline({\n  // yes, we can add it to an entire timeline!\n  scrollTrigger: {\n    trigger: \".header\",\n    pin: false, // pin the trigger element while active\n    start: \"bottom center\", // when the top of the trigger hits the top of the viewport\n    end: \"+=100\",\n    once: true,\n    scrub: 1, // smooth scrubbing, takes 1 second to \"catch up\" to the scrollbar\n  },\n});\nfirstAnim\n  .addLabel(\"start\", { scale: 1 })\n\n  // eslint-disable-next-line no-restricted-globals\n  .from(\"#info\", { y: innerWidth * 1 });\n\nlet secondAnim = gsap.timeline({\n  // yes, we can add it to an entire timeline!\n  scrollTrigger: {\n    end: \"+=100\",\n    trigger: \"#MainContent\",\n    pin: false, // pin the trigger element while active\n    start: \"top center\", // when the top of the trigger hits the top of the viewport\n    once: true,\n    scrub: 3, // smooth scrubbing, takes 1 second to \"catch up\" to the scrollbar\n  },\n});\n\nsecondAnim\n  .addLabel(\"start\", { scale: 0 })\n  // eslint-disable-next-line no-restricted-globals\n  .from(\".css\", { x: innerWidth * -1 })\n\n  .addLabel(\"color\")\n  // eslint-disable-next-line no-restricted-globals\n  .from(\".react\", { x: innerWidth * -1 })\n  .addLabel(\"ao\")\n  // eslint-disable-next-line no-restricted-globals\n  .from(\".html\", { x: innerWidth * -1 })\n  // eslint-disable-next-line no-restricted-globals\n  .from(\".javascript\", { x: innerWidth * -1 });\n\nlet thirdAnim = gsap.timeline({\n  // yes, we can add it to an entire timeline!\n  scrollTrigger: {\n    trigger: \".content0\",\n    pin: false, // pin the trigger element while active\n    start: \"top center\", // when the top of the trigger hits the top of the viewport\n    once: true,\n    end: \"+=100\",\n    scrub: 3, // smooth scrubbing, takes 1 second to \"catch up\" to the scrollbar\n  },\n});\n\nthirdAnim\n  .addLabel(\"great\", { scale: 0 })\n  // eslint-disable-next-line no-restricted-globals\n  .from(\".content0\", { x: innerWidth * -1 });\n\n// eslint-disable-next-line no-restricted-globals\n\nlet fourthAnim = gsap.timeline({\n  // yes, we can add it to an entire timeline!\n  scrollTrigger: {\n    trigger: \".content3\",\n    pin: false, // pin the trigger element while active\n    start: \"top center\", // when the top of the trigger hits the top of the viewport\n    once: true,\n    end: \"+=100\",\n    scrub: 3, // smooth scrubbing, takes 1 second to \"catch up\" to the scrollbar\n  },\n});\n\nfourthAnim\n  .addLabel(\"greatpo\", { scale: 1 })\n  // eslint-disable-next-line no-restricted-globals\n  .from(\".content3\", { x: innerWidth * 1 });\n\nlet fifthAnim = gsap.timeline({\n  // yes, we can add it to an entire timeline!\n  scrollTrigger: {\n    trigger: \"#MainContent\",\n    pin: false, // pin the trigger element while active\n    start: \"center bottom\", // when the top of the trigger hits the top of the viewport\n    duration: 1,\n    scrub: 1,\n    end: \"+=50\",\n  },\n});\n\nfifthAnim\n  .addLabel(\"greatOS\", { scale: 1 })\n  // eslint-disable-next-line no-restricted-globals\n  .to(\"#logo\", { x: innerWidth * 1, opacity: 0 });\n\nlet sixthAnim = gsap.timeline({\n  // yes, we can add it to an entire timeline!\n  scrollTrigger: {\n    trigger: \"#MainContent\",\n    pin: false, // pin the trigger element while active\n    start: \"top center\", // when the top of the trigger hits the top of the viewport\n    end: \"+=50\", // end after scrolling 500px beyond the start\n\n    duration: 2,\n    scrub: 3, // smooth scrubbing, takes 1 second to \"catch up\" to the scrollbar\n  },\n});\nsixthAnim\n  .addLabel(\"greatom\", { scale: 0 })\n  // eslint-disable-next-line no-restricted-globals\n  .to(\".header\", { x: innerWidth * -1, opacity: 0 });\n\nlet seventhAnim = gsap.timeline({\n  // yes, we can add it to an entire timeline!\n  scrollTrigger: {\n    trigger: \"#MainContent\",\n    pin: false, // pin the trigger element while active\n    start: \"bottom bottom\", // when the top of the trigger hits the top of the viewport\n    end: \"+=10\", // end after scrolling 500px beyond the start\n    once: true,\n    duration: 2,\n    scrub: 3, // smooth scrubbing, takes 1 second to \"catch up\" to the scrollbar\n  },\n});\nseventhAnim\n  .addLabel(\"greatpo\", { scale: 0 })\n  // eslint-disable-next-line no-restricted-globals\n  .from(\"#container2\", { x: innerWidth * -1 });\n"],"sourceRoot":""}